#!/usr/bin/python3

from plano import *

if len(ARGS) < 2:
    exit("The RELEASED_VERSION parameter is required")

if not which("abidiff"):
    exit("The abidiff command from the libabigail package is required")

released_version = ARGS[1]
released_archive_stem = f"qpid-proton-{released_version}"
released_archive_name = f"{released_archive_stem}.tar.gz"

main_archive_stem = "qpid-proton-main"
main_archive_name = f"{main_archive_stem}.tar.gz"

remove("output")

with working_dir("output"):
    released_archive_dir = absolute_path(released_archive_stem)
    released_install_dir = f"{released_archive_dir}-install"

    main_archive_dir = absolute_path(main_archive_stem)
    main_install_dir = f"{main_archive_dir}-install"

    call("curl -s https://archive.apache.org/dist/qpid/proton/{}/{} -o {}",
         released_version, released_archive_name, released_archive_name)

    extract_archive(released_archive_name)

    call("curl -sL https://api.github.com/repos/apache/qpid-proton/tarball/main -o {}",
         main_archive_name)

    extract_archive(main_archive_name)

    move(find_only_one(".", "apache-qpid-proton-*"), main_archive_dir)

    with working_dir(join(released_archive_dir, "bld")):
        call("cmake .. -DBUILD_TLS=ON -DCMAKE_INSTALL_PREFIX={} -DBUILD_BINDINGS=\"cpp\"", released_install_dir, quiet=True)
        call("make -j8", quiet=True)
        call("make install", quiet=True)

    with working_dir(join(main_archive_dir, "bld")):
        call("cmake .. -DBUILD_TLS=ON -DCMAKE_INSTALL_PREFIX={} -DBUILD_BINDINGS=\"cpp\"", main_install_dir, quiet=True)
        call("make -j8", quiet=True)
        call("make install", quiet=True)

    names = [
        "libqpid-proton-tls.so",
        "libqpid-proton-core.so",
        "libqpid-proton-proactor.so",
        "libqpid-proton.so",
        "libqpid-proton-cpp.so",
    ]

    errors = list()

    for name in names:
        try:
            call("abidiff {}/lib64/{} {}/lib64/{}", released_install_dir, name, main_install_dir, name)
        except CalledProcessError as e:
            errors.append(e)

    if errors:
        for e in errors:
            print(str(e))

        print("FAILED: Detected breaking ABI changes")

        exit(1)

    print("PASSED")
